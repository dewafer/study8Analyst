@Grab('org.eclipse.jetty.aggregate:jetty-server')
@Grab('org.eclipse.jetty.aggregate:jetty-servlet')
@Grab('javax.servlet:javax.servlet-api:3.0.1')
@Grab('org.hsqldb:hsqldb')
@GrabConfig(systemClassLoader=true)

import groovy.servlet.GroovyServlet
import groovy.sql.Sql
import org.eclipse.jetty.server.Server
import org.eclipse.jetty.servlet.DefaultServlet
import org.eclipse.jetty.servlet.ServletContextHandler
import org.hsqldb.jdbc.JDBCDataSource

def server = new Server(8080)

def context = new ServletContextHandler(server, '/', ServletContextHandler.SESSIONS)

def dataSource = new JDBCDataSource (
        database: 'jdbc:hsqldb:file:magicMirrorDB',
        user: 'sa',
        password: ''
)

Sql sql = new Sql(dataSource)
DataGenerator generator = new DataGenerator(sql:sql);

sql.withTransaction {
    sql.execute '''
        CREATE TABLE IF NOT EXISTS Student (
            student_id  INTEGER GENERATED BY DEFAULT AS IDENTITY,
            student_no  VARCHAR(50),
            name        VARCHAR(250),
            gender      VARCHAR(2),
            class       VARCHAR(50)
        );
    '''

    sql.execute '''
        CREATE TABLE IF NOT EXISTS Subject (
            subject_id  INTEGER GENERATED BY DEFAULT AS IDENTITY,
            name        VARCHAR(250),
            sort        INTEGER
        );
    '''

    sql.execute '''
        CREATE TABLE IF NOT EXISTS Exam (
            exam_id     INTEGER GENERATED BY DEFAULT AS IDENTITY,
            student_id  INTEGER,
            subject_id  INTEGER,
            name        VARCHAR(250),
            score       INTEGER,
            sort        INTEGER
        );
    '''

    sql.execute '''
        DROP VIEW IF EXISTS ExamScoreView;
        CREATE VIEW ExamScoreView AS
        SELECT
             Exam.exam_id
            ,Exam.student_id
            ,Exam.subject_id
            ,Exam.name as ExamName
            ,Student.student_no
            ,Student.name as StudentName
            ,Subject.name as SubjectName
            ,Exam.score
            ,Subject.sort as SubjectSort
            ,Exam.sort as ExamSort
        FROM Exam LEFT JOIN Subject ON (Exam.subject_id = Subject.subject_id)
                  LEFT JOIN Student ON (Exam.student_id = Student.student_id)
        ORDER BY ExamSort, SubjectSort;
    '''
}

// populate data
generator.populate();

sql.close()

context.with {
    resourceBase = 'webroot'
    addServlet(DefaultServlet, '/')
    addServlet(GroovyServlet, '*.groovy')
    welcomeFiles = ['index.html']
    setAttribute('dataSource', dataSource)
    setAttribute('fillExams', generator.&fillExams)
}

server.start()
